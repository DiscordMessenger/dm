diff --git a/WinCustomCtlTest/exinclude/websocketpp/common/thread.hpp b/WinCustomCtlTest/exinclude/websocketpp/common/thread.hpp
index 1b0472a..83cbb9d 100644
--- a/WinCustomCtlTest/exinclude/websocketpp/common/thread.hpp
+++ b/WinCustomCtlTest/exinclude/websocketpp/common/thread.hpp
@@ -59,6 +59,12 @@
     #include <thread>
     #include <mutex>
     #include <condition_variable>
+#elif defined(_WEBSOCKETPP_IPROGS_THREAD_)
+    #include <iprog/mutex.hpp>
+    #include <iprog/thread.hpp>
+    #include <iprog/lock_guard.hpp>
+    #include <iprog/unique_lock.hpp>
+    #include <iprog/condition_variable.hpp>
 #else
     #include <boost/thread.hpp>
     #include <boost/thread/mutex.hpp>
@@ -68,7 +74,13 @@
 namespace websocketpp {
 namespace lib {
 
-#if defined(_WEBSOCKETPP_CPP11_THREAD_) || defined(_WEBSOCKETPP_MINGW_THREAD_)
+#if defined(_WEBSOCKETPP_IPROGS_THREAD_)
+    using iprog::mutex;
+    using iprog::lock_guard;
+    using iprog::thread;
+    using iprog::unique_lock;
+    using iprog::condition_variable;
+#elif defined(_WEBSOCKETPP_CPP11_THREAD_) || defined(_WEBSOCKETPP_MINGW_THREAD_)
     using std::mutex;
     using std::lock_guard;
     using std::thread;
diff --git a/WinCustomCtlTest/exinclude/websocketpp/transport/asio/base.hpp b/WinCustomCtlTest/exinclude/websocketpp/transport/asio/base.hpp
index b945fe1..b52eb79 100644
--- a/WinCustomCtlTest/exinclude/websocketpp/transport/asio/base.hpp
+++ b/WinCustomCtlTest/exinclude/websocketpp/transport/asio/base.hpp
@@ -52,7 +52,7 @@ namespace asio {
 class handler_allocator {
 public:
     static const size_t size = 1024;
-    
+
     handler_allocator() : m_in_use(false) {}
 
 #ifdef _WEBSOCKETPP_DEFAULT_DELETE_FUNCTIONS_
diff --git a/WinCustomCtlTest/exinclude/websocketpp/transport/asio/endpoint.hpp b/WinCustomCtlTest/exinclude/websocketpp/transport/asio/endpoint.hpp
index 94509ad..273ae35 100644
--- a/WinCustomCtlTest/exinclude/websocketpp/transport/asio/endpoint.hpp
+++ b/WinCustomCtlTest/exinclude/websocketpp/transport/asio/endpoint.hpp
@@ -45,6 +45,73 @@ namespace websocketpp {
 namespace transport {
 namespace asio {
 
+#ifdef MINGW_SPECIFIC_HACKS
+
+/***
+ * In current versions of libstdc++, the error_constants.h code associated to mingw32
+ * does not define certain standard enum values for `std::errc`. (In C++11 standard,
+ * sections 19.5.2, 19.5.3.) Asio uses these for lib::asio::errc when it is compiled
+ * as a stand-alone library, so because of the libstdc++ defect, code below referring
+ * to lib::asio::errc::operation_canceled fails to compile on mingw.
+ *
+ * This workaround detects the defect using SFINAE and returns 'false' for the check
+ * if operation_canceled is not defined, instead of failing to compile.
+ *
+ * If upstream patches this later by defining those enum values, then the workaround
+ * will stop having any effect.
+ *
+ * https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68307
+ */
+namespace _workaround_gcc_libstdcpp_issue_68307_missing_values {
+  /***
+   * Same as std::enable_if, but don't want to introduce dependency on <type_traits>
+   * since that's C++11 only
+   */
+  template<bool B, class T = void>
+  struct enable_if {};
+
+  template<class T>
+  struct enable_if<true, T> { typedef T type; };
+
+  /***
+   * Metafunction to test "operation_canceled" value
+   */
+  template <typename T, typename ENABLE=void>
+  struct op_canceled_helper {
+    template <typename U>
+    static inline bool is_op_canceled(const U & u) { return false; }
+  };
+
+  template <typename T>
+  struct op_canceled_helper<T, enable_if<T::operation_canceled == T::operation_canceled, void> > {
+    template<typename U>
+    static inline bool is_op_canceled(const U & u) { return u == T::operation_canceled; }
+  };
+
+  /***
+   * This function is intended to be a drop-in replacement for
+   *   (asio_ec == lib::asio::errc::operation_canceled)
+   *
+   * except that if lib::asio::errc::operation_canceled does not exist, it returns false,
+   * instead of failing to compile.
+   *
+   * When using boost and not asio standalone, then lib::asio::errc is a namespace, not an enum class.
+   * So the template code will fail to compile and we need to block it from being instantiated, with this
+   * ifdef. When using boost the standard library symbol definitions aren't relevant afaik.
+   */
+#ifdef ASIO_STANDALONE
+  static inline bool is_op_canceled(const lib::asio::error_code & asio_ec) {
+    return op_canceled_helper<lib::asio::errc, void>::is_op_canceled(asio_ec);
+  }
+#else
+  static inline bool is_op_canceled(const lib::asio::error_code & asio_ec) {
+    return asio_ec == lib::asio::errc::operation_canceled;
+  }
+#endif
+} // namespace _workaround
+
+#endif
+
 /// Asio based endpoint transport component
 /**
  * transport::asio::endpoint implements an endpoint transport component using
@@ -161,7 +228,7 @@ public:
             rhs.m_acceptor = NULL;
             rhs.m_listen_backlog = lib::asio::socket_base::max_connections;
             rhs.m_state = UNINITIALIZED;
-            
+
             // TODO: this needs to be updated
         }
         return *this;
@@ -225,7 +292,7 @@ public:
      * @param ec Set to indicate what error occurred, if any.
      */
     void init_asio(lib::error_code & ec) {
-        // Use a smart pointer until the call is successful and ownership has 
+        // Use a smart pointer until the call is successful and ownership has
         // successfully been taken. Use unique_ptr when available.
         // TODO: remove the use of auto_ptr when C++98/03 support is no longer
         //       necessary.
@@ -247,7 +314,7 @@ public:
      * @see init_asio(io_service_ptr ptr)
      */
     void init_asio() {
-        // Use a smart pointer until the call is successful and ownership has 
+        // Use a smart pointer until the call is successful and ownership has
         // successfully been taken. Use unique_ptr when available.
         // TODO: remove the use of auto_ptr when C++98/03 support is no longer
         //       necessary.
@@ -378,7 +445,7 @@ public:
     lib::asio::io_service & get_io_service() {
         return *m_io_service;
     }
-    
+
     /// Get local TCP endpoint
     /**
      * Extracts the local endpoint from the acceptor. This represents the
@@ -386,7 +453,7 @@ public:
      *
      * Sets a bad_descriptor error if the acceptor is not currently listening
      * or otherwise unavailable.
-     * 
+     *
      * @since 0.7.0
      *
      * @param ec Set to indicate what error occurred, if any.
@@ -425,10 +492,10 @@ public:
 
         m_acceptor->open(ep.protocol(),bec);
         if (bec) {ec = clean_up_listen_after_error(bec);return;}
-        
+
         m_acceptor->set_option(lib::asio::socket_base::reuse_address(m_reuse_addr),bec);
         if (bec) {ec = clean_up_listen_after_error(bec);return;}
-        
+
         // if a TCP pre-bind handler is present, run it
         if (m_tcp_pre_bind_handler) {
             ec = m_tcp_pre_bind_handler(m_acceptor);
@@ -437,13 +504,13 @@ public:
                 return;
             }
         }
-        
+
         m_acceptor->bind(ep,bec);
         if (bec) {ec = clean_up_listen_after_error(bec);return;}
-        
+
         m_acceptor->listen(m_listen_backlog,bec);
         if (bec) {ec = clean_up_listen_after_error(bec);return;}
-        
+
         // Success
         m_state = LISTENING;
         ec = lib::error_code();
@@ -825,7 +892,7 @@ protected:
         m_elog = e;
     }
 
-    void handle_accept(accept_handler callback, lib::asio::error_code const & 
+    void handle_accept(accept_handler callback, lib::asio::error_code const &
         asio_ec)
     {
         lib::error_code ret_ec;
@@ -833,7 +900,11 @@ protected:
         m_alog->write(log::alevel::devel, "asio::handle_accept");
 
         if (asio_ec) {
+		#ifdef MINGW_SPECIFIC_HACKS
+            if (_workaround_gcc_libstdcpp_issue_68307_missing_values::is_op_canceled(asio_ec)) {
+		#else
             if (asio_ec == lib::asio::errc::operation_canceled) {
+		#endif // MINGW_SPECIFIC_HACKS
                 ret_ec = make_error_code(websocketpp::error::operation_canceled);
             } else {
                 log_err(log::elevel::info,"asio handle_accept",asio_ec);
